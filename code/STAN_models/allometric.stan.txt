
    
    data {
    int<lower=1> N;
    int<lower=0> killed[N];
    int<lower=0> initial[N];
    int<lower=1> Nind;
    int<lower=1> id[Nind]; // this will need to be character???
    }
    
    parameters {
    real<lower=0> mu.alpha.a;
    real<lower=0> var.mu.alpha.a;
    real<lower=0> alpha.a;
    real<lower=0> var.a.ind;
    real<lower=0> beta1.a; 
    real<lower=0> var.beta1.a;
    real<lower=0> beta2.a;
    real<lower=0> var.beta2.a;  

    real<lower=0> mu.alpha.h;
    real<lower=0> var.mu.alpha.h;
    real<lower=0> alpha.h;
    real<lower=0> var.h.ind;
    real<lower=0> beta1.h; 
    real<lower=0> var.beta1.h;
    real<lower=0> beta2.h;
    real<lower=0> var.beta2.h;  
    }

    transformed parameters{

    
    }

    
    model {

    //priors

    // Population level prior on attack rate intercept
    mu.alpha.a ~ normal(-4.5, var.mu.alpha.a);
    var.mu.alpha.a ~ uniform(0,10);

    // Individual level variation in alpha.a
    for(i in 1:Nind){
      alpha.a[i] ~ normal(mu.alpha.a, var.a.ind);
      }
    var.a.ind ~ uniform(0,10);

    // Allometric scaling exponents for attack rate
    beta1.a ~ normal(0.75, var.beta1.a);
    var.beta1.a ~ gamma(2,1);

    beta2.a ~ normal(0.5, var.beta2.a);
    var.beta2.a ~ gamma(2,1);
    
  //--------------------------------------------------------------------------

    //Population level prior on handling time intercept
    mu.alpha.h ~ normal(11, var.mu.alpha.h);
    var.mu.alpha.h ~ uniform(0,5);
   
    //Individual level variation in handling time interpect 
    for(i in 1:Nind){
      alpha.h[i] ~ normal(mu.alpha.h, var.h.ind);
      }
    var.h.ind ~ uniform(0,10)

    // Allometric scaling exponents for handling time
    beta1.h ~ normal(-0.75, var.beta1.h);
    var.beta1.h ~ gamma(10,1);

    beta2.h ~ normal(0.5, var.beta2.h);
    var.beta2.h ~ gamma(2,1);

    // likelihood
    for(i in 1:Nind){
      log(a[i]) <- alpha.a[i] + beta1.a*log(mc[i]) + beta2.a*log(mr[i]);
      log(h[i]) <- alpha.h[i] + beta1.h*log(mc[i]) + beta2.h*log(mr[i]);
      }

    for(i in 1:N){
      killed[i] ~ binomial(initial[i], prob[i]);
      prob[i] <- 1/(1/a[id[i]] + h[id[i]]*initial[i]);
      }
    
    }
